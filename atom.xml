<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liuniandxx Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-13T16:17:29.883Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Liuniandxx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQLAlchemy: ORM for python</title>
    <link href="http://yoursite.com/2016/08/14/SQLAlchemy-ORM-for-python/"/>
    <id>http://yoursite.com/2016/08/14/SQLAlchemy-ORM-for-python/</id>
    <published>2016-08-13T16:17:29.000Z</published>
    <updated>2016-08-13T16:17:29.883Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>trie(单词查找树)</title>
    <link href="http://yoursite.com/2016/06/18/trie/"/>
    <id>http://yoursite.com/2016/06/18/trie/</id>
    <published>2016-06-18T08:22:25.000Z</published>
    <updated>2016-06-22T00:58:46.632Z</updated>
    
    <content type="html">&lt;p&gt;字符串查找可以使用通用的查找算法（排序二分、二叉查找树、红黑树、散列表），但是可以利用字符串的性质，开发更高效的算法–Trie树(单词查找树)。&lt;br&gt;Trie树的性能在&amp;lt;&amp;lt;算法&amp;gt;&amp;gt;中具有如下描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体来说，Trie树算法在一般应用场景中（甚至对于巨型的符号表）都能取得以下性能：&lt;br&gt;查找命中所需的时间与被查找的键的长度成正比;&lt;br&gt;查找未命中只需要检查若干个字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;单词查找树&quot;&gt;&lt;a href=&quot;#单词查找树&quot; class=&quot;headerlink&quot; title=&quot;单词查找树&quot;&gt;&lt;/a&gt;单词查找树&lt;/h4&gt;&lt;p&gt;Trie树定义&lt;br&gt;单词查找树是由链接的点组成的数据结构。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单词查找树有且只有一个根结点，没有任何结点指向根结点&lt;/li&gt;
&lt;li&gt;除根节点外，每个节点都有且只有一个指向它的结点（指向它的节点称为它的父结点）&lt;/li&gt;
&lt;li&gt;每个节点最多指向R（R为字母表的大小）个结点&lt;/li&gt;
&lt;li&gt;叶子节点都指向空（Null）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;单词查找树的实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Trie&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; R = &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Object val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node[] next = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node[R];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Value &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node x = get(root, key, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (Value) x.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Node x, String key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d == key.length()) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = key.charAt(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; get(x.next[c], key, d + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key, Value val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root = put(root, key, val, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node &lt;span class=&quot;title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Node x, String key, Value val, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d == key.length()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x.val = val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = key.charAt(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x.next[c] = put(x.next[c], key, val, d + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面单词查找树具有如下性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单词查找树的链表结构（形状）和键的插入删除顺序没有关系：对于任意给定的一组键，其单词查找树都是唯一的。&lt;/li&gt;
&lt;li&gt;单词查找树中查找一个键或是插入一个键，访问数组的次数最多为键的长度加1。&lt;/li&gt;
&lt;li&gt;一棵单词查找树中链接的总数在RN和RNw之间，其中w为键的平均长度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实可以发现，上面的单词查找树在时间上具有很好的性能，但是在空间上，特别是当字母表大小R很大时，空间利用率不高，空间需求大，&lt;br&gt;在实践中，限制“普通”的单词查找树的使用。&lt;/p&gt;
&lt;h4 id=&quot;三向单词查找树&quot;&gt;&lt;a href=&quot;#三向单词查找树&quot; class=&quot;headerlink&quot; title=&quot;三向单词查找树&quot;&gt;&lt;/a&gt;三向单词查找树&lt;/h4&gt;&lt;p&gt;三向单词查找树是为了解决“普通”单词查找树在空间使用上的不足，引入了类似树的“孩子兄弟表法”思想。&lt;br&gt;三向单词查找树的每个节点都只有三个子连接，分别为left、mid和right。left指向对应小于当前key的节点，mid指向当前位置等于key的节点，right指向当前位置大于key的节点。这样就可以使用三个链接表示所有的结点。&lt;br&gt;三向单词查找树的实现：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;三向单词查找树&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Trie&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node left, mid, right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; isLeaf = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mid = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            right = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == word || word.length() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node p = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(index &amp;lt; word.length() &amp;amp;&amp;amp; p != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; curpos = word.charAt(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curpos &amp;lt; p.c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p = p.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curpos &amp;gt; p.c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p = p.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ++index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(index &amp;gt;= word.length() &amp;amp;&amp;amp; p.isLeaf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p = p.mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == word || word.length() &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root = insert(root, word, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Node x, String key, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; curpos = key.charAt(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node(curpos);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curpos &amp;lt; x.c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x.left = insert(x.left, key, d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curpos &amp;gt; x.c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x.right = insert(x.right, key, d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d &amp;lt; key.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x.mid = insert(x.mid, key, d + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x.isLeaf = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String prefix)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == prefix || prefix.length() &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Node p = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(index &amp;lt; prefix.length() &amp;amp;&amp;amp; p != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; curpos = prefix.charAt(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curpos &amp;lt; p.c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p = p.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(curpos &amp;gt; p.c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p = p.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p = p.mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ++index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; index == prefix.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;字符串查找可以使用通用的查找算法（排序二分、二叉查找树、红黑树、散列表），但是可以利用字符串的性质，开发更高效的算法–Trie树(单词查找树)。&lt;br&gt;Trie树的性能在&amp;lt;&amp;lt;算法&amp;gt;&amp;gt;中具有如下描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体来说，
    
    </summary>
    
    
      <category term="data structure" scheme="http://yoursite.com/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb主从复制集群</title>
    <link href="http://yoursite.com/2016/05/29/mongodb-replica/"/>
    <id>http://yoursite.com/2016/05/29/mongodb-replica/</id>
    <published>2016-05-29T12:44:28.000Z</published>
    <updated>2016-05-31T10:01:39.131Z</updated>
    
    <content type="html">&lt;p&gt;复制能够提供数据冗余和提升数据可靠性。相对于单点数据服务器，复制通过在多个数据服务器上存储数据的多个备份，提升可数据库的容错性。&lt;br&gt;Mongodb主从复制集群有两种架构：Master-Slave和Replica Set(复制集)。两种架构都是典型的一主多从的架构。&lt;/p&gt;
&lt;h4 id=&quot;Mongodb复制集原理&quot;&gt;&lt;a href=&quot;#Mongodb复制集原理&quot; class=&quot;headerlink&quot; title=&quot;Mongodb复制集原理&quot;&gt;&lt;/a&gt;Mongodb复制集原理&lt;/h4&gt;&lt;p&gt;Mongodb复制集通过一组mongod实例组成，包含一个Primary节点、多个Secondary节点以及最多一个Abiter节点。Mongodb Driver所有的数据都从Primary节点写入，Secondary节点从Primary节点同步写入数据，保证复制集中所有节点都存储同样的数据集。Secondary节点从Primary节点同步数据是异步的，不保证数据的强一致性，只保证数据的最终一致性，牺牲部分的可用性，提供了数据的高可靠性。&lt;br&gt;下图(来自Mongodb官方文档)是Mongodb复制集的主从同步的过程示意图，包含一个Primary节点和两个Secondary节点，只有Primary节点可以读写，Secondary节点不能读写(Secondary节点默认状态不可读写)，这样就整个复制集而言，数据是强一致性的。&lt;br&gt;&lt;img src=&quot;/img/replica-set-read-write-operations-primary.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Primary节点接收所有的写操作，同时一个复制集只能有一个Primary节点。Primary节点在操作日志(oplog)上记录数据集的所有的变更。secondary节点复制主节点的操作日志(oplog)，同时将操作日志的操作应用到它们的数据集上，这样确保了Secondary节点和Primary节点的数据的一致性。当Primary节点不可用时，“胜任”的Secondary节点将举行选举来选举自己为新的Primary节点。&lt;br&gt;&lt;img src=&quot;/img/replica-set-primary-with-two-secondaries.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以在Mongodb复制集中添加一个额外的mongod实例来充当“仲裁人”，以保证整个复制集中的节点数目为奇数个，Arbiter节点加入保证了在Primary节点选举中确保了新的Primary节点的大多数“选票”。由于Arbiter节点不存储数据，所以相对于Primary节点和Secondary节点，Arbiter节点的不需要特定的硬件配置，部署Arbiter节点的服务器的节点的硬件配置可较低。在Primary选举中，Arbiter节点只具有”投票权“，不具有”被选举权“，即Arbiter节&lt;br&gt;点只是参数选举，但是不会被选举成为Primary节点。&lt;br&gt;&lt;img src=&quot;/img/replica-set-primary-with-secondary-and-arbiter.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当Primary节点和复制集中的其他节点超过10S没有通信时，可”胜任的“Secondary节点将发起选举和选举自己为新的Primary节点，第一个发起选举并获得大多数选票的Secondary节点将成为新的Primary节点。&lt;br&gt;&lt;img src=&quot;/img/replica-set-trigger-election.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在选举过程中，复制集中没有Primary节点，复制集不能够处理写操作，复制集中的现存的节点都是只读的，可以处理读操作。&lt;br&gt;影响选举的因素和条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制选举协议&lt;/li&gt;
&lt;li&gt;心跳(Heartbeats)&lt;br&gt;复制集成员相互之间每隔2s发送一次心跳(pings)。如果一个心跳在10s内没有回应，复制集其他成员将标记未回应的成员不可达。&lt;/li&gt;
&lt;li&gt;成员优先级&lt;/li&gt;
&lt;li&gt;网络分区&lt;/li&gt;
&lt;li&gt;选举节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mongodb复制集的选举使用的Bully Algorithm(霸道选举算法)，算法的具体表述为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任意一个节点都可以发起选举&lt;/li&gt;
&lt;li&gt;节点P给所有的更大ID的节点发送Election(选举)消息，等待Ok反馈消息&lt;br&gt;(1)如果没有收到更大ID节点的返回的Ok消息，节点P就成为了coordinator节点，同时给所有的更小ID节点发送Coordinator消息&lt;br&gt;(2)如果收到更大ID节点返回的Ok消息，节点P选举中止，等待Coordinator消息&lt;/li&gt;
&lt;li&gt;如果一个节点收到了Election消息&lt;br&gt;(1)如果改节点是最大的ID节点，立即反馈发送Coordinator消息&lt;br&gt;(2)其他情况，立即反馈发送Ok消息&lt;/li&gt;
&lt;li&gt;如果一个节点收到Coordinator消息，它就将发送者当作coorinator节点&lt;/li&gt;
&lt;li&gt;最后胜出的节点就是coordinator节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bully算法具体执行过程见下图:&lt;br&gt;&lt;img src=&quot;/img/bully-algorithm.jpg&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Mongodb-Master-Slave&quot;&gt;&lt;a href=&quot;#Mongodb-Master-Slave&quot; class=&quot;headerlink&quot; title=&quot;Mongodb Master-Slave&quot;&gt;&lt;/a&gt;Mongodb Master-Slave&lt;/h4&gt;&lt;p&gt;Mongodb Master-Slave架构在Mongodb3.2前都可以使用。&lt;br&gt;Master-Slave架构相对于复制集架构，主要在于配置简单。如果当前已经有一个mongod实例，想定义另外一个mongod实例为其Slave节点时，使用mongo –slave –source host:port即可。&lt;br&gt;Master-Slave架构在Primary节点宕机后，整个集群将不可用，没有提供自动选举的功能，不能保证集群的高可靠。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;复制能够提供数据冗余和提升数据可靠性。相对于单点数据服务器，复制通过在多个数据服务器上存储数据的多个备份，提升可数据库的容错性。&lt;br&gt;Mongodb主从复制集群有两种架构：Master-Slave和Replica Set(复制集)。两种架构都是典型的一主多从的架构。&lt;/p
    
    </summary>
    
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Bloom Filter</title>
    <link href="http://yoursite.com/2016/05/16/bloom-filter/"/>
    <id>http://yoursite.com/2016/05/16/bloom-filter/</id>
    <published>2016-05-16T10:21:03.000Z</published>
    <updated>2016-05-17T14:44:40.059Z</updated>
    
    <content type="html">&lt;p&gt;Bloom Filter(布隆过滤器)是由Howard Bloom在1970年提出的二进制向量数据结构，应用哈希变换来解决集合成员判定（set membership）问题，具有很好的空间和时间效率。&lt;/p&gt;
&lt;h4 id=&quot;Bloom-Filter的原理&quot;&gt;&lt;a href=&quot;#Bloom-Filter的原理&quot; class=&quot;headerlink&quot; title=&quot;Bloom Filter的原理&quot;&gt;&lt;/a&gt;Bloom Filter的原理&lt;/h4&gt;&lt;p&gt;Bloom Filter能够很容易的表示集合数据，使用长度为m的数组存储集合信息，使用k个相互独立的hash函数，将集合中的元素映射到m位的数组空间中。&lt;br&gt;基本思想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将长度为m的数组位全部设置为0&lt;/li&gt;
&lt;li&gt;对于集合S中的任意一个元素a，使用k个独立的hash函数进行计算，&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$h_i(a)=x,(1 \leq i \leq k, 1 \leq x \leq m)$&quot; style=&quot;border:none;&quot;&gt;，将数组中x个位置设置为1，对于结合a来说，经过k次hash运算后，会将数组中w位&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=(w \leq k)&quot; style=&quot;border:none;&quot;&gt;设置为1&lt;/li&gt;
&lt;li&gt;对于集合S的每个元素，重复步骤2，就完成了集合S和数组之间的映射&lt;/li&gt;
&lt;li&gt;完成步骤1，2，3后，查找某个元素b是否在集合S中，使用相同的k个hash函数计算hash值，如果数组所有hash值对应的位都为1，则判定b属于集合S，如果存在数组中hash值对应的位为0，则判定b不属于集合S&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Bloom-Filter伪代码实现&quot;&gt;&lt;a href=&quot;#Bloom-Filter伪代码实现&quot; class=&quot;headerlink&quot; title=&quot;Bloom Filter伪代码实现&quot;&gt;&lt;/a&gt;Bloom Filter伪代码实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[Bloom Filter]&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BloomFilter(Set s, hashs_k, m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter [1..m] = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foreach ai in S:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foreach hj in hashs_k:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filter[hj(ai)] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end foreach&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end foreach&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return filter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IsMember(filter, hashs_k, Key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foreach hj in hashs_k:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if filter[hj(Key)] == 0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Bloom-Filter误判&quot;&gt;&lt;a href=&quot;#Bloom-Filter误判&quot; class=&quot;headerlink&quot; title=&quot;Bloom Filter误判&quot;&gt;&lt;/a&gt;Bloom Filter误判&lt;/h4&gt;&lt;img src=&quot;/img/bloom_filter.jpg&quot;&gt;
&lt;p&gt;Bloom Filter是通过位数组和hash函数来表征集合的，没有实际存储集合数据，所以空间利用率很高，但是会存在误判(false positive)的情况。Bloom Filter的误判情况只能是将不是集合的元素判定成集合元素，不可能出现将集合元素判定为非集合元素，因为在将该成员映射到位数组空间的过程中，对应的位置已经被设置为1,Bloom Filter不存在将1改为0的情况，所以一定不会发生漏判(false negative)的情况。Bloom Filter只能使用在允许一定程度的误判的场景，不能使用在要求100%准确的判定集合元素的场景。&lt;br&gt;结合上图中的Bloom Filter的例子，上图中位数组的长度为12,使用3个hash函数(每个都有3个箭头指向位数组)，图中表示x1和x2已经映射到位数组中了。假设现在有一个元素x3(不同于x1和x2)，其映射到位数组中，刚好将对应的2,7和11，那么使用IsMember的逻辑将误判x3已经映射到位数组中。&lt;/p&gt;
&lt;h4 id=&quot;误判率计算&quot;&gt;&lt;a href=&quot;#误判率计算&quot; class=&quot;headerlink&quot; title=&quot;误判率计算&quot;&gt;&lt;/a&gt;误判率计算&lt;/h4&gt;&lt;p&gt;Bloom Filter的错误率和三个因素有关：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合S元素的个数n&lt;/li&gt;
&lt;li&gt;hash函数的数量k&lt;/li&gt;
&lt;li&gt;位数组的大小m&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于hash函数是随机的，所以位数组中特定一位被设置为1的概率为1\m,那么特定一位在一次hash中没有被设置为1的概率为1 - 1/m，所有的集合元素在一个hash函数变换后，位数组位没有被设置为1的概率为&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$(1 - 1/m)^{n}$&quot; style=&quot;border:none;&quot;&gt;，对k个hash函数来说，完成集合S中n个元素到位数组映射后，位数组中特定位没有被设置为1的概率为&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{unset}$&quot; style=&quot;border:none;&quot;&gt;。&lt;br&gt;&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{unset} = (1 - 1/m)^{nk}$&quot; style=&quot;border:none;&quot;&gt;&lt;br&gt;那么，位数组特定位被设置为1的概率为&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{set}$&quot; style=&quot;border:none;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{set} = 1 - P_{unset}$&quot; style=&quot;border:none;&quot;&gt;&lt;br&gt;误判率:误判元素就是被k个hash函数变换位数组对应位都被设置为1,概率为&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{allset}$&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{allset} = (P_{set})^{k} = (1 - (1 - 1/m)^{nk})^{k} \approx (1 - e^{(-kn/m)})^{k}$&quot;&gt;&lt;br&gt;令&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$p = e^{-kn/m}$&quot; style=&quot;border:none;&quot;&gt;，则&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{allset} = (1 - p)^{k}$&quot; style=&quot;border:none;&quot;&gt;,&lt;br&gt;同时&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$k = (-lnp) * (m/n)$&quot; style=&quot;border:none;&quot;&gt;, 令&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$f = ln(P_{allset})$&quot;&gt;,&lt;br&gt;那么&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$f = -(m/n) * lnp * ln(1 - p)$&quot; style=&quot;border:none;&quot;&gt;，根据对称性可知，当 p = 1/2时，f 取得最小值，同理根据同步性，&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$P_{allset}$&quot; style=&quot;border:none;&quot;&gt;取最小值。&lt;br&gt;当p = 1/2时，k = (m/n) &lt;em&gt; ln2,即当hash函数的个数为(m/n) &lt;/em&gt; ln2时，误判率最低。&lt;br&gt;同理允许的最大误判率为p， 那么位数组的大小m，集合S的大小n以及误判率p之间的关系为:&lt;br&gt;&lt;img src=&quot;http://chart.googleapis.com/chart?cht=tx&amp;chl=$m = - (n * lnp) / (ln2)^{2}$&quot; style=&quot;border:none;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Bloom-Filter应用&quot;&gt;&lt;a href=&quot;#Bloom-Filter应用&quot; class=&quot;headerlink&quot; title=&quot;Bloom Filter应用&quot;&gt;&lt;/a&gt;Bloom Filter应用&lt;/h4&gt;&lt;p&gt;Bloom Filter具有极高的空间利用率，尤其数据量极大且容忍一定程度的误判的场景，比如 Google Chrome使用Bloom Filter进行恶意URL的判定;网络爬虫使用它对爬取过的URL进行判定，拼音检查(spelling check)使用它进行单词拼写进行判定等;在数据库领域使用它来实现Bloom Join，即加速两个大表之间的Join过程，等等。&lt;/p&gt;
&lt;h4 id=&quot;Bloom-Filter的代码实现&quot;&gt;&lt;a href=&quot;#Bloom-Filter的代码实现&quot; class=&quot;headerlink&quot; title=&quot;Bloom Filter的代码实现&quot;&gt;&lt;/a&gt;Bloom Filter的代码实现&lt;/h4&gt;&lt;p&gt;Bloom Filter的具体代码实现去Github上搜索，我推荐一个Java实现:&lt;a href=&quot;https://github.com/MagnusS/Java-BloomFilter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java-BloomFilter&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Bloom Filter(布隆过滤器)是由Howard Bloom在1970年提出的二进制向量数据结构，应用哈希变换来解决集合成员判定（set membership）问题，具有很好的空间和时间效率。&lt;/p&gt;
&lt;h4 id=&quot;Bloom-Filter的原理&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="data structure" scheme="http://yoursite.com/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/05/03/hello-world/"/>
    <id>http://yoursite.com/2016/05/03/hello-world/</id>
    <published>2016-05-03T15:42:39.807Z</published>
    <updated>2016-05-03T15:42:39.807Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo Hello world</title>
    <link href="http://yoursite.com/2016/05/03/Hexo-Hello-world/"/>
    <id>http://yoursite.com/2016/05/03/Hexo-Hello-world/</id>
    <published>2016-05-03T15:40:35.000Z</published>
    <updated>2016-05-03T15:40:47.131Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
